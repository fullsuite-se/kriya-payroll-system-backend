model Payitem {
    payitem_id        String          @id @default(uuid()) @db.Char(36)
    company_id        String          @db.Char(36)
    order             Int
    payitem_name      String          @db.VarChar(255)
    payitem_category  PayitemCategory
    payitem_type      PayitemType
    payitem_group     PayitemGroup
    payitem_1601c_tag Payitem1601cTag
    created_at        DateTime        @default(now()) @db.Timestamp(0)

    company                Company               @relation(fields: [company_id], references: [company_id])
    payslip_payable_drafts PayslipPayableDraft[]
    payslip_payables       PayslipPayable[]
    recurring_pays         RecurringPay[]

    @@map("payitems")
}

model SelectedPayitem {
    selected_payitems_id String        @id @default(uuid()) @db.Char(36)
    company_id           String        @db.Char(36) // Add this field
    payrun_id            String        @db.Char(36)
    payitems             Json
    hdmf_coverage        HdmfCoverage?
    sss_coverage         SssCoverage?
    phic_coverage        PhicCoverage?
    created_at           DateTime      @default(now()) @db.Timestamp(0)
    updated_at           DateTime      @default(now()) @db.Timestamp(0)

    company Company @relation(fields: [company_id], references: [company_id]) // Add this relation
    payrun  Payrun  @relation(fields: [payrun_id], references: [payrun_id])

    @@map("selected_payitems")
}

model RecurringPay {
    recurring_pay_id String    @id @default(uuid()) @db.Char(36)
    employee_id      String    @db.Char(36)
    payitem_id       Int
    amount           Decimal   @db.Decimal(10, 2)
    date_start       DateTime? @db.Date
    date_end         DateTime? @db.Date
    created_at       DateTime  @default(now())

    employee          Employee @relation(fields: [employee_id], references: [employee_id])
    Payitem           Payitem? @relation(fields: [payitemPayitem_id], references: [payitem_id])
    payitemPayitem_id String?  @db.Char(36)

    @@map("recurring_pays")
}
